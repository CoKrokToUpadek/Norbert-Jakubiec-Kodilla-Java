#######################################################################################################
CREATE TABLE BOOKS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           BOOK_ID INT(11) NOT NULL,
                           OLD_BOOK_TITLE varchar(255),
                           NEW_BOOK_TITLE varchar(255),
                           OLD_PUBYEAR INT(11),
                           NEW_PUBYEAR INT(11),
                           OLD_BESTSELLER BOOLEAN,
                           NEW_BESTSELLER BOOLEAN,
                           PRIMARY KEY (EVENT_ID)
);
#######################################################################################################
SELECT * from BOOKS_aud;
#######################################################################################################
DELIMITER $$

CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID,  NEW_BOOK_TITLE,
                           NEW_PUBYEAR, NEW_BESTSELLER)
        VALUE(CURTIME(), 'INSERT', NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR,
              NEW.BESTSELLER);
END $$

DELIMITER ;

#######################################################################################################
INSERT INTO BOOKS ( TITLE, PUBYEAR, kodilla_course.BOOKS.BESTSELLER) VALUES ('test-book',2000,0);
COMMIT;
#######################################################################################################
DELIMITER $$

CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID)
        VALUE(CURTIME(), 'DELETE', OLD.BOOK_ID);
END $$

DELIMITER ;
#######################################################################################################
DELETE FROM BOOKS WHERE BOOK_ID=6;
SELECT * from BOOKS_aud;
#######################################################################################################
DELIMITER $$

CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, OLD_BOOK_TITLE, NEW_BOOK_TITLE,
                           OLD_PUBYEAR, NEW_PUBYEAR, OLD_BESTSELLER, NEW_BESTSELLER)
        VALUE(CURTIME(), 'UPDATE',  BOOK_ID, OLD.TITLE,
              NEW.TITLE, OLD.PUBYEAR, NEW.PUBYEAR, OLD.BESTSELLER,
              NEW.BESTSELLER);
END $$

DELIMITER ;
#######################################################################################################
UPDATE BOOKS SET TITLE = 'updated test title'
WHERE BOOK_ID = 7;
#######################################################################################################
SELECT * from READERS;
#######################################################################################################
CREATE TABLE READERS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           READER_ID INT(11) NOT NULL,
                           OLD_FIRSTNAME varchar(255),
                           NEW_FIRSTNAME varchar(255),
                           OLD_LASTNAME varchar(255),
                           NEW_LASTNAME varchar(255),
                           OLD_PESELID varchar(11),
                           NEW_PESELID varchar(11),
                           OLD_VIP_LEVEL varchar(20),
                           NEW_VIP_LEVEL varchar(20),
                           PRIMARY KEY (EVENT_ID)
);
#######################################################################################################
SELECT * FROM READERS_AUD;
#######################################################################################################
DELIMITER $$

CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID,  NEW_FIRSTNAME,
                           NEW_LASTNAME, NEW_PESELID,NEW_VIP_LEVEL)
        VALUE(CURTIME(), 'INSERT', READER_ID, NEW.FIRSTNAME, NEW.LASTNAME,
              NEW.PESELID,NEW.VIP_LEVEL);
END $$

DELIMITER ;

#######################################################################################################
DELIMITER $$

CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID)
        VALUE(CURTIME(), 'DELETE', OLD.READER_ID);
END $$

DELIMITER ;
#######################################################################################################
DELIMITER $$

CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, OLD_FIRSTNAME, NEW_FIRSTNAME,
                           OLD_LASTNAME, NEW_LASTNAME, OLD_PESELID, NEW_PESELID,OLD_VIP_LEVEL, NEW_VIP_LEVEL)
        VALUE(CURTIME(), 'UPDATE',  READER_ID, OLD.FIRSTNAME,
              NEW.FIRSTNAME, OLD.LASTNAME, NEW.LASTNAME, OLD.PESELID,
              NEW.PESELID,OLD.VIP_LEVEL,NEW.VIP_LEVEL);
END $$

DELIMITER ;
#######################################################################################################
INSERT INTO READERS(firstname, lastname, peselid,kodilla_course.READERS.VIP_LEVEL)
values ('testfirstname','testlastname','9999999','Standard customer');
commit ;

DELETE FROM readers where READER_ID=6;
commit ;

INSERT INTO READERS(firstname, lastname, peselid,kodilla_course.READERS.VIP_LEVEL)
values ('testfirstname','testlastname','9999999','Standard customer');
commit ;

UPDATE readers SET FIRSTNAME = 'updated first name'
WHERE READER_ID = 7;
#######################################################################################################
select * from readers_aud;
#######################################################################################################
